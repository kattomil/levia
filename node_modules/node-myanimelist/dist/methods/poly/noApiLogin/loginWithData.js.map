{"version":3,"sources":["../src/methods/poly/noApiLogin/loginWithData.ts"],"names":[],"mappings":";;AAAA,+BAAkD;AAClD,qCAAqC;AACrC,IAAM,EAAE,GAAG,UAAA,GAAG;IACZ,OAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;SACb,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,kBAAkB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAA5D,CAA4D,CAAC;SACxE,IAAI,CAAC,GAAG,CAAC;AAFZ,CAEY,CAAC;AAEf,MAAM,CAAC,OAAO,GAAG,UAAC,KAAa,EAAE,QAAgB,EAAE,SAAc;IAC/D,IAAI,OAAO,GAAuB;QAChC,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,mCAAmC;QACxC,OAAO,EAAE;YACP,cAAc,EAAE,mCAAmC;YACnD,eAAe,EAAE,UAAU;YAC3B,MAAM,EAAE,kBAAgB,SAAS,CAAC,YAAY,wBAAmB,SAAS,CAAC,aAAa,mCAAgC;SACzH;QACD,IAAI,EAAE,EAAE,CAAC;YACP,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,UAAU,EAAE,SAAS,CAAC,UAAU;SACjC,CAAC;QACF,YAAY,EAAE,CAAC;QACf,cAAc,EAAE,UAAS,MAAM;YAC7B,OAAO,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG,CAAC,IAAI,MAAM,IAAI,GAAG,CAAC;QAC1D,CAAC;KACF,CAAC;IAEF,IAAM,aAAa,GAAG,UAAA,GAAG;QACvB,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAExC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC;QAEtD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;YAC1B,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,IAAI,cAAc,EAA7B,CAA6B,CAAC;aACvE,KAAK,CAAC;QAET,IAAI,GAAG,GAAG;YACR,YAAY,EAAE,YAAY;YAC1B,UAAU,EAAE,SAAS,CAAC,UAAU;SACjC,CAAC;QAEF,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;IAEF,OAAO,IAAI,OAAO,CAAC,UAAC,MAAM,EAAE,GAAG;QAC7B,eAAK,CAAC,OAAO,CAAC;aACX,IAAI,CAAC,UAAA,GAAG;YACP,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,kBAAkB,GAAG,GAAG,CAAC,EAA7B,CAA6B,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","file":"loginWithData.js","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\n// const qs = require(\"querystring\");\nconst qs = obj =>\n  Object.keys(obj)\n    .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(obj[key]))\n    .join(\"&\");\n\nmodule.exports = (login: string, password: string, startData: any) => {\n  var options: AxiosRequestConfig = {\n    method: \"post\",\n    url: \"https://myanimelist.net/login.php\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"Cache-Control\": \"no-cache\",\n      cookie: `MALSESSIONID=${startData.MALSESSIONID}; MALHLOGSESSID=${startData.MALHLOGSESSID}; is_logged_in=1; m_gdpr_mdl=1`\n    },\n    data: qs({\n      user_name: login,\n      password: password,\n      cookie: \"1\",\n      submit: \"1\",\n      csrf_token: startData.csrf_token\n    }),\n    maxRedirects: 0,\n    validateStatus: function(status) {\n      return (status >= 200 && status < 300) || status == 302;\n    }\n  };\n\n  const parseResponse = res => {\n    let cookies = res.headers[\"set-cookie\"];\n\n    cookies = cookies.map(cookie => cookie.split(\";\")[0]);\n\n    cookies = cookies.map(cookie => {\n      cookie = cookie.split(\"=\");\n      return { name: cookie[0], value: cookie[1] };\n    });\n\n    const MALSESSIONID = cookies.find(cookie => cookie.name == \"MALSESSIONID\")\n      .value;\n\n    let out = {\n      MALSESSIONID: MALSESSIONID,\n      csrf_token: startData.csrf_token\n    };\n\n    return out;\n  };\n\n  return new Promise((EndRes, rej) => {\n    axios(options)\n      .then(res => {\n        EndRes(parseResponse(res));\n      })\n      .catch(err => rej(\"Can Not Login!: \" + err));\n  });\n};\n"],"sourceRoot":"../../../../src"}