{"version":3,"sources":["../src/methods/poly/noApiLogin/getStartData.ts"],"names":[],"mappings":";;AAAA,+BAA0B;AAC1B,iCAAmC;AAEnC,MAAM,CAAC,OAAO,GAAG;IACf,IAAM,aAAa,GAAG,UAAA,GAAG;QACvB,IAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAEjC,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAExC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC;QAEtD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;YAC1B,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,GAAG;YACX,UAAU,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YACpD,YAAY,EAAE,IAAI;YAClB,aAAa,EAAE,IAAI;SACpB,CAAC;QAEF,MAAM,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAChC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,IAAI,cAAc,EAA7B,CAA6B,CACxC,CAAC,KAAK,CAAC;QAER,MAAM,CAAC,aAAa,GAAG,OAAO,CAAC,IAAI,CACjC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,IAAI,eAAe,EAA9B,CAA8B,CACzC,CAAC,KAAK,CAAC;QAER,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IAEF,OAAO,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;QAC1B,eAAK;aACF,GAAG,CAAC,8CAA8C,CAAC;aACnD,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC;aAC/B,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,GAAG,CAAC,MAAM,CAAC,EAAX,CAAW,CAAC;aAC3B,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,kBAAkB,CAAC,EAAvB,CAAuB,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","file":"getStartData.js","sourcesContent":["import axios from \"axios\";\nimport * as cheerio from \"cheerio\";\n\nmodule.exports = () => {\n  const parseResponse = res => {\n    const $ = cheerio.load(res.data);\n\n    let cookies = res.headers[\"set-cookie\"];\n\n    cookies = cookies.map(cookie => cookie.split(\";\")[0]);\n\n    cookies = cookies.map(cookie => {\n      cookie = cookie.split(\"=\");\n      return { name: cookie[0], value: cookie[1] };\n    });\n\n    let outObj = {\n      csrf_token: $('[name=\"csrf_token\"]').attr(\"content\"),\n      MALSESSIONID: null,\n      MALHLOGSESSID: null\n    };\n\n    outObj.MALSESSIONID = cookies.find(\n      cookie => cookie.name == \"MALSESSIONID\"\n    ).value;\n\n    outObj.MALHLOGSESSID = cookies.find(\n      cookie => cookie.name == \"MALHLOGSESSID\"\n    ).value;\n\n    return outObj;\n  };\n\n  return new Promise((res, rej) => {\n    axios\n      .get(\"https://myanimelist.net/about.php?go=contact\")\n      .then(res => parseResponse(res))\n      .then(outObj => res(outObj))\n      .catch(err => rej(\"Tokens Not Found\"));\n  });\n};\n"],"sourceRoot":"../../../../src"}