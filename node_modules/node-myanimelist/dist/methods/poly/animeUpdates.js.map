{"version":3,"sources":["../src/methods/poly/animeUpdates.ts"],"names":[],"mappings":"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","file":"animeUpdates.js","sourcesContent":["import axios from \"axios\";\n\nimport * as cheerio from \"cheerio\";\n\nexport default function(name: string) {\n  return new Promise((res, rej) => {\n    let $ = null;\n    axios\n      .get(`https://myanimelist.net/profile/${name}`)\n      .then(res => cheerio.load(res.data))\n      .then(ch => {\n        $ = ch;\n        const updatesA = $(\"div.statistics-updates\", \"div.updates.anime\");\n        if (!updatesA) {\n          if (updatesA.length == 0) res([]);\n        }\n        return updatesA;\n      })\n      .then(updatesA => {\n        let array = [];\n        updatesA.each((i, elem) => {\n          let title = $(elem)\n            .find(\"a\", \"div.data\")\n            .text()\n            .trim();\n          let link = $(elem)\n            .find(\"a\")\n            .attr(\"href\");\n          let ep = $(elem)\n            .find(\"div.fn-grey2 span\")\n            .eq(0)\n            .text()\n            .trim();\n          let score = $(elem)\n            .find(\"div.fn-grey2 span\")\n            .eq(1)\n            .text()\n            .trim();\n          let img = $(elem)\n            .find(\"img\")\n            .attr(\"src\");\n          let graph = $(elem).find(\"span.graph-inner\");\n          let date = $(elem)\n            .find(\"span.fn-grey2\", \"div.clearfix\")\n            .text()\n            .trim();\n\n          let watching = graph.hasClass(\"watching\");\n          let dropped = graph.hasClass(\"dropped\");\n          let completed = graph.hasClass(\"completed\");\n          let on_hold = graph.hasClass(\"on_hold\");\n          let plan_to_watch = graph.hasClass(\"plan_to_watch\");\n\n          let color = 0;\n          if (watching) {\n            color = 2994233;\n          } else if (dropped) {\n            color = 10563377;\n          } else if (completed) {\n            color = 2507919;\n          } else if (on_hold) {\n            color = 16372823;\n          } else if (plan_to_watch) {\n            color = 12829635;\n          }\n\n          ep = parseInt(ep);\n          score = parseInt(score);\n\n          let obj = { title, link, ep, score, img, date, color };\n          array.push(obj);\n        });\n\n        res(array);\n      })\n      .catch(e => rej(e));\n  });\n}\n\nexport interface animeUpdatesOBJ {\n  title: string;\n  link: string;\n  ep: number;\n  score: number;\n  img: string;\n  date: string;\n  color: number;\n}\n"],"sourceRoot":"../../../src"}